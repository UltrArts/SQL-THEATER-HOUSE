-- 1. Criação da tabela de Assentos (Seats)
-- Assentos serão fixos para todas as sessões, registrados uma só vez.
CREATE TABLE Seats (
    seat_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    seat_category VARCHAR2(50) NOT NULL, -- Premium, VIP, Standard
    seat_number VARCHAR2(10) NOT NULL UNIQUE -- Número único para cada assento
);

-- 2. Criação da tabela de Salas (TheaterRooms)
-- Cada sala de teatro com capacidade definida por assentos.
CREATE TABLE TheaterRooms (
    room_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    room_name VARCHAR2(100) UNIQUE NOT NULL,
    total_seats NUMBER NOT NULL
);

-- 3. Criação da tabela de Espectáculos/Sessões (Sessions)
-- Sessões marcadas em horários específicos, associadas a uma sala.
CREATE TABLE Sessions (
    session_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_name VARCHAR2(100) NOT NULL,
    session_description VARCHAR2(255),
    start_time TIMESTAMP NOT NULL,
    duration_in_hours NUMBER NOT NULL, -- Duração da sessão
    room_id NUMBER NOT NULL,
    session_state VARCHAR2(50) CHECK (session_state IN ('open', 'closed', 'canceled', 'postponed', 'finalized')),
    FOREIGN KEY (room_id) REFERENCES TheaterRooms(room_id)
);

-- 4. Criação da tabela de Preços (TicketPrices)
-- Diferentes preços para categorias de assentos por sessão.
CREATE TABLE TicketPrices (
    price_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id NUMBER NOT NULL,
    seat_category VARCHAR2(50) NOT NULL, -- Premium, VIP, Standard
    price NUMBER NOT NULL,
    FOREIGN KEY (session_id) REFERENCES Sessions(session_id)
);

-- 5. Criação da tabela de Compradores (Customers)
-- Clientes que compram ingressos.
CREATE TABLE Customers (
    customer_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_name VARCHAR2(100) NOT NULL,
    customer_email VARCHAR2(100) UNIQUE NOT NULL
);

-- 6. Criação da tabela de Ingressos (Tickets)
-- Associações de clientes com sessões e assentos, para compra de ingressos.
CREATE TABLE Tickets (
    ticket_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    session_id NUMBER NOT NULL,
    customer_id NUMBER NOT NULL,
    seat_id NUMBER NOT NULL,
    ticket_status VARCHAR2(50) CHECK (ticket_status IN ('pending', 'archived')), -- Status do ticket após validação
    FOREIGN KEY (session_id) REFERENCES Sessions(session_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (seat_id) REFERENCES Seats(seat_id)
);

-- 7. Criação da tabela de Transações (Transactions)
-- Histórico de compras, reembolsos e validações de ingressos.
CREATE TABLE Transactions (
    transaction_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    ticket_id NUMBER NOT NULL,
    transaction_type VARCHAR2(50) CHECK (transaction_type IN ('purchase', 'refund', 'validation')),
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (ticket_id) REFERENCES Tickets(ticket_id)
);

-- 8. Trigger para impedir que a capacidade da sala seja excedida.
CREATE OR REPLACE TRIGGER check_room_capacity
BEFORE INSERT ON Tickets
FOR EACH ROW
DECLARE
    total_tickets_sold NUMBER;
    room_capacity NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_tickets_sold
    FROM Tickets t, Sessions s
    WHERE t.session_id = :NEW.session_id
    AND t.session_id = s.session_id;

    SELECT total_seats INTO room_capacity
    FROM TheaterRooms r, Sessions s
    WHERE s.room_id = r.room_id
    AND s.session_id = :NEW.session_id;

    IF (total_tickets_sold + 1 > room_capacity) THEN
        RAISE_APPLICATION_ERROR(-20001, 'A capacidade da sala foi excedida.');
    END IF;
END;
/

-- 9. Trigger para impedir compra de assentos já ocupados.
CREATE OR REPLACE TRIGGER prevent_double_booking
BEFORE INSERT ON Tickets
FOR EACH ROW
DECLARE
    seat_occupied NUMBER;
BEGIN
    SELECT COUNT(*) INTO seat_occupied
    FROM Tickets
    WHERE seat_id = :NEW.seat_id
    AND session_id = :NEW.session_id;

    IF seat_occupied > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'O assento já está ocupado para esta sessão.');
    END IF;
END;
/

-- 10. Trigger para mudar o estado da sessão para "fechada" quando atingir a capacidade máxima.
CREATE OR REPLACE TRIGGER close_session_when_full
AFTER INSERT ON Tickets
FOR EACH ROW
DECLARE
    total_tickets_sold NUMBER;
    room_capacity NUMBER;
BEGIN
    SELECT COUNT(*) INTO total_tickets_sold
    FROM Tickets t, Sessions s
    WHERE t.session_id = :NEW.session_id
    AND t.session_id = s.session_id;

    SELECT total_seats INTO room_capacity
    FROM TheaterRooms r, Sessions s
    WHERE s.room_id = r.room_id
    AND s.session_id = :NEW.session_id;

    IF total_tickets_sold = room_capacity THEN
        UPDATE Sessions
        SET session_state = 'closed'
        WHERE session_id = :NEW.session_id;
    END IF;
END;
/

-- 11. Função para obter o preço do ingresso com base na categoria do assento.
CREATE OR REPLACE FUNCTION get_ticket_price(p_session_id NUMBER, p_seat_category VARCHAR2)
RETURN NUMBER
IS
    v_price NUMBER;
BEGIN
    SELECT price INTO v_price
    FROM TicketPrices
    WHERE session_id = p_session_id
    AND seat_category = p_seat_category;

    RETURN v_price;
END;
/

-- 12. Procedure para efetuar a compra de um ingresso e inserir no histórico de transações.
CREATE OR REPLACE PROCEDURE purchase_ticket(p_customer_id NUMBER, p_session_id NUMBER, p_seat_id NUMBER)
IS
    v_ticket_id NUMBER;
BEGIN
    -- Inserir o ingresso
    INSERT INTO Tickets (session_id, customer_id, seat_id, ticket_status)
    VALUES (p_session_id, p_customer_id, p_seat_id, 'pending')
    RETURNING ticket_id INTO v_ticket_id;

    -- Registrar transação de compra
    INSERT INTO Transactions (customer_id, ticket_id, transaction_type)
    VALUES (p_customer_id, v_ticket_id, 'purchase');
END;
/

-- 13. Procedure para efetuar reembolso de um ingresso.
CREATE OR REPLACE PROCEDURE refund_ticket(p_ticket_id NUMBER)
IS
BEGIN
    -- Registrar transação de reembolso
    INSERT INTO Transactions (customer_id, ticket_id, transaction_type)
    SELECT customer_id, ticket_id, 'refund'
    FROM Tickets
    WHERE ticket_id = p_ticket_id;

    -- Atualizar status do ticket
    DELETE FROM Tickets WHERE ticket_id = p_ticket_id;
END;
/

-- 14. Procedure para arquivar um ingresso após validação.
CREATE OR REPLACE PROCEDURE archive_ticket(p_ticket_id NUMBER)
IS
BEGIN
    -- Registrar transação de validação
    INSERT INTO Transactions (customer_id, ticket_id, transaction_type)
    SELECT customer_id, ticket_id, 'validation'
    FROM Tickets
    WHERE ticket_id = p_ticket_id;

    -- Atualizar status do ticket
    UPDATE Tickets
    SET ticket_status = 'archived'
    WHERE ticket_id = p_ticket_id;
END;
/
